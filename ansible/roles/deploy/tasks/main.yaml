---
- name: Start and enable Docker service
  ansible.builtin.systemd:
    name: docker
    state: started
    enabled: yes

- name: Clone repo to directory
  ansible.builtin.git:
    repo: 'https://github.com/lin001234/ntu_wars_deployment.git'
    dest: /home/{{ansible_user}}/ci 
    force: yes

- name: Stop and remove existing containers
  command: docker compose -f docker-compose.deploy.yml down -v
  args:
    chdir: "/home/{{ansible_user}}/ci"

- name: Build docker image
  command: docker compose -f docker-compose.deploy.yml build
  args:
    chdir: "/home/{{ansible_user}}/ci"

- name: Run docker application in background
  command: docker compose -f docker-compose.deploy.yml up -d
  args:
    chdir: "/home/{{ansible_user}}/ci"

- name: Wait for services to be active
  pause:
    seconds: 5

- name: Check backend health
  uri:
    url: https://localhost/api/health
    return_content: yes
    status_code: 200
  register: backend_health
  ignore_errors: yes

- name: Check frontend health
  uri:
    url: https://localhost
    return_content: yes
    status_code: 200
  register: frontend_health
  ignore_errors: yes

- name: Copy green nginx config to container if health is good
  command: docker cp /home/{{ansible_user}}/ci/app/proxy/nginx-green.conf nginx-proxy:/etc/nginx/nginx.conf
  when: backend_health.status == 200 and frontend_health.status == 200

- name: Copy blue nginx config to container if health is bad
  command: docker cp /home/{{ansible_user}}/ci/app/proxy/nginx-blue.conf nginx-proxy:/etc/nginx/nginx.conf
  when: backend_health.status != 200 and frontend_health.status != 200

- name: Reload Nginx inside container
  command: docker exec nginx-proxy nginx -s reload

- name: Show deployment status
  debug:
    msg: >
      {% if backend_health.status == 200 and frontend_health.status == 200 %}
        ✅ Green containers passed. Switched traffic to green.
      {% else %}
        ❌ Green failed. Fallback to blue config in Nginx.
      {% endif %}
      
#- name: Fetch logs for each container
#  command: docker logs {{ item }}
#  loop:
#   - star_swapper-frontend
#    - star_swapper-backend
#    - nginx-proxy
#  register: container_logs 
  

#- name: Display logs
#  debug: 
#    msg: |
#      === Logs for container: {{ item.item }} ===
#      {{ item.stdout }}
#  loop: "{{ container_logs.results }}"
