services:
  blue-backend:
    image: blue-backend
    pull_policy: never
    container_name: blue-backend
    build:
      context: .
      dockerfile: Dockerfile
      #By specifying target: prod, Docker will only build up to the prod stage, skipping earlier stages (like build). This can save time and resources if you only need the final, production-ready image.
      target: prod
      args:
        BRANCH: main
    environment:
      - NODE_ENV=production
    env_file:
      - ./app/backend/.env
    restart: unless-stopped
    networks:
      - app-network
  
  blue-frontend:
    image: blue-frontend
    pull_policy: never
    container_name: blue-frontend
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
      args:
        VITE_BACKEND_URL: http://localhost
        # change to vm public address in deployment
        BRANCH: main
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    depends_on:
      - blue-backend
    networks:
      - app-network

  green-backend:
    image: green-backend
    pull_policy: never
    container_name: green-backend
    build:
      context: ./
      dockerfile: Dockerfile
      #By specifying target: prod, Docker will only build up to the prod stage, skipping earlier stages (like build). This can save time and resources if you only need the final, production-ready image.
      target: prod
      args:
        BRANCH: green
    environment:
      - NODE_ENV=production
    env_file:
      - ./app/backend/.env
    restart: unless-stopped
    networks:
      - app-network
  
  green-frontend:
    image: green-frontend
    pull_policy: never
    container_name: green-frontend
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
      args:
        VITE_BACKEND_URL: http://localhost
        # change to vm public address in deployment
        BRANCH: green
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    depends_on:
      - green-backend
    networks:
      - app-network

  nginx:
    image: nginx-proxy
    container_name: nginx-proxy
    build:
      context: ./app/proxy
      dockerfile: Dockerfile
    ports:
      - "443:443"
    volumes:
      - /mnt/c/Users/khant/nginx-certs:/nginx-certs
    environment:
      - color=blue
    depends_on:
      - green-frontend
      - green-backend
      - blue-backend
      - blue-frontend
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge